name: Continuous Depolyment With Docker

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
    paths:
      - my-garden-be/**
      - my-garden-fe/**

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/denia-park/my-garden
  VERSION: ${{ github.sha }}
  NAME: my-garden

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./my-garden-be

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a # v3.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # GitHub Container Registry에 로그인 후 빌드 & 푸시
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  # 배포 Job
  deploy:
    name: Deploy
    needs: build  # build 후에 실행되도록 정의
    runs-on: [ self-hosted, gardener ] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3000 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          # 조건부 실행을 위해 컨테이너가 존재하는지 확인
          if [ $(docker ps -aq -f name=${{ env.NAME }}) ]; then
          docker stop ${{ env.NAME }}
          docker rm ${{ env.NAME }}
          docker rmi ${{ env.DOCKER_IMAGE }}:latest
          fi
          docker run -d -p 443:443 -p 80:80 --name ${{ env.NAME }} --restart always ${{ env.DOCKER_IMAGE }}:latest
